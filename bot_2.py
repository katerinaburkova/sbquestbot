#dost_setup.py
#–∏–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–æ–≤
from dostoevsky.tokenization import RegexTokenizer
from dostoevsky.models import FastTextSocialNetworkModel
import telebot
import random
from telebot import apihelper
import pickle 
from datetime import datetime
import pandas as pd
from datetime import date, timedelta
print('v2.1')
#–ø—Ä–æ–∫—Å–∏
#apihelper.proxy = {'https': 'socks5://feUCSf:fcVcSj@138.59.204.151:9359'}
import requests
session = requests.Session()
session.verify = False
#–∏–º–ø–æ—Ä—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –±–æ—Ç–∞
f = open('comments_list.txt', 'r') 
comments_list = f.read().split('\n')
f = open('scope_list.txt', 'r') 
scope_list = f.read().split('\n')
f = open('content_list.txt', 'r') 
content_list = f.read().split('\n')
f = open('random_shit_list.txt', 'r') 
rs_list = f.read().split('\n')
f = open('addition.txt', 'r') 
add_list = f.read().split('\n')
f = open('personal_rs.txt', 'r') 
prs_list = f.read().split('\n')
f = open('reaction_triggers.txt', 'r') 
triggers = f.read().split('\n')
f = open('reaction_triggers_pb.txt', 'r') 
triggers_pb = f.read().split('\n')
f = open('reaction_list.txt', 'r') 
reac_list = f.read().split('\n')
reaction =[]
for i in range (0, len(reac_list)-1):
	reaction.append(reac_list[i].split('/'))
#—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
#hist= pd.DataFrame(columns=['chat','name','message','timestamp','date','hour', 'min'])
hist=list()
hist.append([0,0,0,0,0,0,0]) 
#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot = telebot.TeleBot('1030051620:AAGtlWX2jxhKnLLmaOKy5NpJOefU7BMgRaw');
#–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_basic = telebot.types.ReplyKeyboardMarkup(False, True)
keyboard_basic.row('—Ç–∏–º–±–∞—Ä–æ–º–µ—Ç—Ä üå°','–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É üìÑ', '–æ–±—Å—É–¥–∏—Ç—å —Å–∫–æ—É–ø üåö','–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç üí©')
#—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_hello(message):
	bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–≤–µ—Ç!',reply_markup=keyboard_basic)

#–±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
@bot.message_handler(content_types=['text'])
def send_text(message):
		count_mess=0 #–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å, –∑–∞–≤—è–∑–∞–Ω–æ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã
		
		#–∑–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π
		global hist

		hist.append([
			message.chat.id, 
			message.from_user.first_name, 
			message.text.lower(), 
			message.date, 
			datetime.fromtimestamp(message.date).date(),
			int(datetime.fromtimestamp(message.date).strftime('%H')),
			int(datetime.fromtimestamp(message.date).strftime('%M'))
			])
		hist2 = pd.DataFrame(hist, columns=['chat','name','message','timestamp','date','hour','min'])
		
		#knopki
		if message.text.lower() == '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É üìÑ':
			name = message.from_user.first_name
			bot.send_message(message.chat.id, name+', '+comments_list[int(random.random()*(len(comments_list)-1))])
		if message.text.lower() == '–æ–±—Å—É–¥–∏—Ç—å —Å–∫–æ—É–ø üåö':
			name = message.from_user.first_name
			bot.send_message(message.chat.id, name+', '+scope_list[int(random.random()*(len(scope_list)-1))])
		if message.text.lower() == '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç üí©':
			name = message.from_user.first_name
			bot.send_message(message.chat.id, name+', '+content_list[int(random.random()*(len(content_list)-1))])
		if message.text.lower() == '—Ç–∏–º–±–∞—Ä–æ–º–µ—Ç—Ä üå°':
			this_chat_hist = hist2[hist2['chat']==message.chat.id]
			this_chat_hist = this_chat_hist[this_chat_hist['date']>=date.today()-timedelta(days=7)]
			#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—É—Å—Ç–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
			if this_chat_hist.empty == 1:
				tm=0
			else:
				tm=this_chat_hist.groupby(['chat']).count().iloc[0,0]
			print(tm)
			suboptimal_time_pivot = this_chat_hist[this_chat_hist['hour']<9]
			suboptimal_time_pivot.append(this_chat_hist[this_chat_hist['hour']>21])
			if suboptimal_time_pivot.empty ==1:
				sttm=0
			else:
				sttm=suboptimal_time_pivot.groupby(['chat']).count().iloc[0,0]

			if sttm/tm*100>35:
				zone="–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. :( –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!" 
			else:
				if sttm/tm*100>20:
					zone="–ù—É –≤ —Ü–µ–ª–æ–º –æ–∫. –†–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ" 
				else:
					zone="–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π –ª–∞–π—Ñ—Å—Ç–∞–π–ª!"

			if tm/100*100>250:
					zone2="–í—ã —Ç–æ–ª—å–∫–æ –±–æ–ª—Ç–∞–µ—Ç–µ? –ò–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Ç–æ–∂–µ?"
			else:
				if tm/100*100>100:
					zone2="–†–∞–±–æ—á–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞!"
				else: 
					if tm/100*100>50:
						zone2="–ß—Ç–æ-—Ç–æ –≤—ã –ø—Ä–∏—Ç–∏—Ö–ª–∏, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?"
					else:
						zone2="–ê –≤—ã –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"


			bot.send_message(message.chat.id, 
				'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: '+str(int(tm/100*100))+"% "+zone2+"  "
				'–î–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø–æ—Å–ª–µ 21:00 –∏ —Ä–∞–Ω–µ–µ 9:00 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: '+str(int(sttm/tm*100))+"% "+zone)
			name_pivot =this_chat_hist.groupby(['name']).count() #–ø–æ —é–∑–µ—Ä–∞–º
			name_pivot['share']=name_pivot[['message']]/tm*100
			m = name_pivot[['share']].sort_values(by=['share'], ascending=False).to_string()
			bot.send_message(message.chat.id, '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ:'+m)

		#—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä—ã
		for i in range (0,len(triggers)-1):
			#print(i)
			#print(triggers[i])
			#print(triggers_pb[i])
			pb=float(triggers_pb[i])
			if 	message.text.lower().find(triggers[i])>=0:
				if random.random()>pb:
					bot.send_message(message.chat.id, reaction[i][int((random.random()*len(reaction[i])-1))])
					count_mess =+1

		#TLDR-—Ç—Ä–∏–≥–≥–µ—Ä
		#print(len(message.text.lower()))
		if len(message.text.lower()) > 450 :
			name = message.from_user.first_name
			bot.send_message(message.chat.id, name+', '+' –∞ —Å–∏–Ω—Ç–µ–∑ –º–æ–∂–Ω–æ?')

		#—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤–±—Ä–æ—Å—ã
		if count_mess<1:
			if random.random()>0.97:
				if random.random()>0.95:
					bot.send_message(message.chat.id, add_list[int((random.random()*len(add_list)-1))])
					bot.send_message(message.chat.id, rs_list[int((random.random()*len(rs_list)-1))])
				else:
					bot.send_message(message.chat.id, rs_list[int((random.random()*len(rs_list)-1))])
			if random.random()<0.03:
				name = message.from_user.first_name
				bot.send_message(message.chat.id, name+', '+prs_list[int((random.random()*len(prs_list)-1))])

		
		#name_pivot['share'][i] = name_pivot['message'][i]/total_mes_in_the_chat
		#—Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑
		tokenizer = RegexTokenizer()
		tokens = tokenizer.split(message.text.lower())
		model = FastTextSocialNetworkModel(tokenizer=tokenizer)
		msgs = [message.text.lower()]
		results = model.predict(msgs, k=5)
		print(results)

		#—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
		if count_mess<1:
			if results[0]['positive']>=0.45:
				if random.random()>0.7:
					bot.send_message(message.chat.id, 'üëç')
			if results[0]['negative']>=0.:
				if random.random()>0.7:
					bot.send_message(message.chat.id, 'üí©')


#–∑–∞–ø—É—Å–∫
bot.polling()
print('ok')
